Что такое рекурсия?
это концепция в программировании, которая позволяет функции вызывать саму себя в своем собственном определении. 
Это означает, что функция может решать задачу, разбивая ее на более мелкие подзадачи того же типа.


Что такое стек?
это абстрактная структура данных, которая представляет собой упорядоченную коллекцию элементов, 
где операции добавления нового элемента и удаления последнего элемента осуществляются только с одного конца, который называется вершиной стека.

Какие типы рекурсии существуют? Каких нужно избегать?
Простая рекурсия
Хвостовая рекурсия
Взаимная рекурсия
Косвенная рекурсия
Важно избегать бесконечной рекурсии, которая никогда не достигает базового случая или условия остановки. 
Это может привести к переполнению стека и сбою программы из-за исчерпания доступной памяти.

Когда стоит выбрать рекурсию, а когда цикл(итерацию)?
Рекурсию рекомендуется использовать в следующих случаях: Когда задача или алгоритм имеет естественную рекурсивную структуру. 
Когда рекурсивное решение позволяет более простую и интуитивно понятную реализацию, по сравнению с итеративным подходом.
Когда количество рекурсивных вызовов ограничено
Итерация (цикл) рекомендуется использовать в следующих случаях:Когда задача может быть легко решена с помощью циклических конструкций, и нет естественной рекурсивной структуры.
Когда требуется максимальная эффективность и быстродействие. Циклы обычно более эффективны по использованию памяти и времени выполнения, чем рекурсия.

Что обязательно нужно учитывать/добавлять при работе с рекурсией?
Базовый случай: Каждая рекурсивная функция должна иметь базовый случай, при котором рекурсия прекращается и функция возвращает конечное значение. 
Прогресс к базовому случаю: В рекурсивной функции необходимо гарантировать прогресс к базовому случаю с каждым рекурсивным вызовом. 
Иначе может возникнуть бесконечная рекурсия, которая приведет к переполнению стека вызовов.
Изменение параметров: При каждом рекурсивном вызове необходимо изменять параметры или аргументы функции таким образом, чтобы задача становилась более простой или ближе к базовому случаю. 
Управление памятью: Рекурсия может потреблять больше памяти, чем итеративные алгоритмы. 
Тестирование и отладка: Рекурсивные функции могут быть сложными для отладки из-за множественных вызовов. 
Эффективность: В некоторых случаях рекурсия может быть менее эффективной, чем итеративные алгоритмы. 

Напишите рекурсивный метод для нахождения факториала числа 5! = 1 * 2 * 3 * 4 * 5
function factorial(n) {
  if (n === 0 || n === 1) {  
    return 1;
  } else {
    return n * factorial(n - 1);  
  }
}

console.log(factorial(5));


Напишите алгоритм Евклида через рекурсию
    while (a != b && a!= 0 && b!=0) {
            if (a > b) {
                a = a - b;
            } else {
                b = b - a;
            }
        }
        if (a == b) {
            return a;
        } else if(a == 0) {
            return b;
        } else {
            return a;
        }
