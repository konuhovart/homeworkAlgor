Как оценивается эффективность алгоритма?
Временная сложность: Время, затраченное алгоритмом на выполнение задачи. Оценивают время выполнения в зависимости от размера входных данных.
Пространственная сложность: Определяет объем памяти, необходимый для работы алгоритма.
Что учитывается при асимптотическом анализе?

Временная сложность: Оценивается количество операций, необходимых для выполнения алгоритма в зависимости от размера входных данных.
Пространственная сложность: Оценивается объем памяти, необходимый для выполнения алгоритма в зависимости от размера входных данных.
Лучший, худший и средний случаи:Лучший случай оценивает наименьшую временную или пространственную сложность, которую алгоритм может достичь.
Худший случай оценивает наибольшую временную или пространственную сложность, которую алгоритм может показать.
Средний случай учитывает статистическое распределение входных данных и оценивает ожидаемую сложность алгоритма.

Перечислите основные правила асимптотического анализа
Закон сокращения: При анализе алгоритмов, основанных на арифметических операциях, константы и меньшие члены игнорируются.
Закон суммирования: При анализе сложности алгоритма, состоящего из последовательности операций, общая сложность равна сумме сложностей отдельных операций.
Закон максимума: Если в алгоритме присутствуют разные ветви или случаи, оценивается наиболее сложная из них.
Закон произведения: Если вложенные операции выполняются независимо, их сложности перемножаются.
Закон логарифма: Сложность алгоритма увеличивается с логарифмическим шагом при росте размера входных данных.

Какие порядки роста асимтотических функций знаете?
O(1) - постоянное время: Функция имеет постоянную сложность и не зависит от размера входных данных.
O(log n) - логарифмическое время: Функция растет логарифмически с размером входных данных. 
O(n) - линейное время: Функция растет линейно с размером входных данных. 
O(n log n) - линейно-логарифмическое время: Функция растет пропорционально произведению размера входных данных на логарифм от размера входных данных.
O(n^2) - квадратичное время: Функция растет квадратично с размером входных данных.
O(n^k) - полиномиальное время: Функция растет с размером входных данных в степени k, где k - положительное целое число. 
O(2^n) - экспоненциальное время: Функция растет экспоненциально с размером входных данных.

Оцените сложность по времени и памяти
void method(int n) {
        for (int i = 0; i < n / 2; i++) {
            for (int j = 1; j + n / 2 <= n; j++) {
                for (int k = 1; k <= n; k = k * 2) {
                    System.out.println("I am expert!");
                }
            }
        }
    }
    
    
    
Оцените сложность по времени и памяти
void method2(int n) {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j = j + i) {
                System.out.println("I am expert!");
            }
        }
    }
    
    
    
Оцените сложность по времени и памяти
void method3(int a, int b) { // примечание a > 0 и b > 0
        while (a != b) {
            if (a > b) {
                a = a - b;
            } else {
                b = b - a;
            }
        }
    }
